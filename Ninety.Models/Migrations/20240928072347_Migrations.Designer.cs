// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ninety.Models.Models;

#nullable disable

namespace Ninety.Models.Migrations
{
    [DbContext(typeof(NinetyContext))]
    [Migration("20240928072347_Migrations")]
    partial class Migrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ninety.Models.Models.BadmintonMatchDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ApointSet1")
                        .HasColumnType("int")
                        .HasColumnName("APointSet1");

                    b.Property<int>("ApointSet2")
                        .HasColumnType("int")
                        .HasColumnName("APointSet2");

                    b.Property<int?>("ApointSet3")
                        .HasColumnType("int")
                        .HasColumnName("APointSet3");

                    b.Property<int>("BpointSet1")
                        .HasColumnType("int")
                        .HasColumnName("BPointSet1");

                    b.Property<int>("BpointSet2")
                        .HasColumnType("int")
                        .HasColumnName("BPointSet2");

                    b.Property<int?>("BpointSet3")
                        .HasColumnType("int")
                        .HasColumnName("BPointSet3");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("BadmintonMatchDetails");
                });

            modelBuilder.Entity("Ninety.Models.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("TeamA")
                        .HasColumnType("int");

                    b.Property<int>("TeamB")
                        .HasColumnType("int");

                    b.Property<string>("TotalResult")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("WinningTeam")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Matchs");
                });

            modelBuilder.Entity("Ninety.Models.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Ninety.Models.Models.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("Ninety.Models.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Ninety.Models.Models.TeamDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamDetails");
                });

            modelBuilder.Entity("Ninety.Models.Models.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("NumOfParticipants")
                        .HasColumnType("int");

                    b.Property<int>("OrganId")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Rules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("OrganId");

                    b.HasIndex("SportId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Ninety.Models.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ninety.Models.Models.BadmintonMatchDetail", b =>
                {
                    b.HasOne("Ninety.Models.Models.Match", "Match")
                        .WithMany("BadmintonMatchDetails")
                        .HasForeignKey("MatchId")
                        .IsRequired()
                        .HasConstraintName("FK_BadmintonMatchDetails_Matchs");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Ninety.Models.Models.Match", b =>
                {
                    b.HasOne("Ninety.Models.Models.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .IsRequired()
                        .HasConstraintName("FK_Matchs_Tournaments");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Ninety.Models.Models.Organization", b =>
                {
                    b.HasOne("Ninety.Models.Models.User", "User")
                        .WithMany("Organizations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Organizations_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ninety.Models.Models.Team", b =>
                {
                    b.HasOne("Ninety.Models.Models.Tournament", "Tournament")
                        .WithMany("Teams")
                        .HasForeignKey("TournamentId")
                        .IsRequired()
                        .HasConstraintName("FK_Teams_Tournaments");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Ninety.Models.Models.TeamDetail", b =>
                {
                    b.HasOne("Ninety.Models.Models.Team", "Team")
                        .WithMany("TeamDetails")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamDetails_Teams");

                    b.HasOne("Ninety.Models.Models.User", "User")
                        .WithMany("TeamDetails")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamDetails_Users");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ninety.Models.Models.Tournament", b =>
                {
                    b.HasOne("Ninety.Models.Models.Organization", "Organ")
                        .WithMany("Tournaments")
                        .HasForeignKey("OrganId")
                        .IsRequired()
                        .HasConstraintName("FK_Tournaments_Organizations");

                    b.HasOne("Ninety.Models.Models.Sport", "Sport")
                        .WithMany("Tournaments")
                        .HasForeignKey("SportId")
                        .IsRequired()
                        .HasConstraintName("FK_Tournaments_Sports");

                    b.Navigation("Organ");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Ninety.Models.Models.Match", b =>
                {
                    b.Navigation("BadmintonMatchDetails");
                });

            modelBuilder.Entity("Ninety.Models.Models.Organization", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Ninety.Models.Models.Sport", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Ninety.Models.Models.Team", b =>
                {
                    b.Navigation("TeamDetails");
                });

            modelBuilder.Entity("Ninety.Models.Models.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Ninety.Models.Models.User", b =>
                {
                    b.Navigation("Organizations");

                    b.Navigation("TeamDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
